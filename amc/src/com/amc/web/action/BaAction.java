/*
 * Generated by MyEclipse Struts
 * Template path: templates/java/JavaClass.vtl
 */
package com.amc.web.action;

import java.io.IOException;
import java.text.ParseException;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;
import org.apache.struts.actions.DispatchAction;

import com.amc.domain.AmcPayable;
import com.amc.domain.AmcReceivable;
import com.amc.domain.PayableSatisticBean;
import com.amc.domain.ReceiveSatisticBean;
import com.amc.service.PayableService;
import com.amc.service.ReceivableService;
import com.amc.util.DateUtils;
import com.amc.util.JsonUtil;
import com.amc.util.StringUtils;
import com.amc.util.echarts.ECharts;

/** 
 * MyEclipse Struts
 * Creation date: 01-13-2016
 * 
 * XDoclet definition:
 * @struts.action parameter="method"
 */
public class BaAction extends DispatchAction {
	/*
	 * Generated Methods
	 */

	/** 
	 * Method execute
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return ActionForward
	 */
	public ReceivableService receivableService;
	public PayableService payableService;
	public ActionForm purchaseChartData(ActionMapping mapping, ActionForm form, 
			HttpServletRequest request, HttpServletResponse response) throws ParseException, IOException {
		String cdateSting=request.getParameter("cdate");
		List<AmcPayable> list;
		List<String> dList=new ArrayList<String>();
		
		Date cdate;
		if(StringUtils.isEmpty(cdateSting)){
			cdate=new Date();
			list=payableService.getWeekAmcPayables(cdate);
			for(int i=-6;i<=0;i++){
				dList.add(DateUtils.getFormatedDate(DateUtils.getDateByOffset(cdate, i), "yyyy-MM-dd"));
			}
		}else{
			cdate=DateUtils.parseDateFromString(cdateSting);
			Date edate=DateUtils.parseDateFromString(request.getParameter("edate"));
			list=payableService.getPeriodAmcPayables(cdate, edate);
			int day=-(DateUtils.daysBetween(cdate, edate));
			for(int i=day;i<=0;i++){
				dList.add(DateUtils.getFormatedDate(DateUtils.getDateByOffset(edate, i), "yyyy-MM-dd"));
			}
		}
		
		List<PayableSatisticBean> beans=new ArrayList<PayableSatisticBean>();
		for(AmcPayable payable:list){
			PayableSatisticBean bean=new PayableSatisticBean();
			bean.setTime(DateUtils.getFormatedDate( payable.getPayctime(), "yyyy-MM-dd"));
			bean.setState(payable.getPaystate());
			bean.setAccount(payable.getPaytotalaccount().toString());
			beans.add(bean);
		}
	
		
		ECharts charts=new ECharts();
		charts.setSeries(JsonUtil.listToJson(beans));
		charts.setCategory(JsonUtil.listToJson(dList));
		response.getWriter().write(JsonUtil.beanToJson(charts));
		return null;
	}
	public ActionForward salesChartData(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) throws ParseException, IOException {
		String cdateSting=request.getParameter("cdate");
		List<AmcReceivable> list=null;
		List<String> dList=new ArrayList<String>();
		Date cdate;
		if(StringUtils.isEmpty(cdateSting)){
			cdate=new Date();
			list=receivableService.getWeekAmcReceivables(cdate);
			for(int i=-6;i<=0;i++){
				dList.add(DateUtils.getFormatedDate(DateUtils.getDateByOffset(cdate, i), "yyyy-MM-dd"));
			}
		}else{
			cdate=DateUtils.parseDateFromString(cdateSting);
			Date edate=DateUtils.parseDateFromString(request.getParameter("edate"));
			list=receivableService.getPeriodAmcReceivables(cdate, edate);
			int day=-(DateUtils.daysBetween(cdate, edate));
			for(int i=day;i<=0;i++){
				dList.add(DateUtils.getFormatedDate(DateUtils.getDateByOffset(edate, i), "yyyy-MM-dd"));
			}
			
		}
		
		List<ReceiveSatisticBean> beans=new ArrayList<ReceiveSatisticBean>();
		for(AmcReceivable receivable:list){
			ReceiveSatisticBean bean=new ReceiveSatisticBean();
			bean.setTime(DateUtils.getFormatedDate( receivable.getRcctime(), "yyyy-MM-dd"));
			bean.setState(receivable.getRcstate());
			bean.setAccount(receivable.getRctaccount().toString());
			beans.add(bean);
		}
		
		
		ECharts charts=new ECharts();
		charts.setSeries(JsonUtil.listToJson(beans));
		charts.setCategory(JsonUtil.listToJson(dList));
		response.getWriter().write(JsonUtil.beanToJson(charts));
		return null;
	}
	public void setReceivableService(ReceivableService receivableService) {
		this.receivableService = receivableService;
	}

	public void setPayableService(PayableService payableService) {
		this.payableService = payableService;
	}
	
}