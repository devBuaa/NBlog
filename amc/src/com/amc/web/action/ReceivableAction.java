/*
 * Generated by MyEclipse Struts
 * Template path: templates/java/JavaClass.vtl
 */
package com.amc.web.action;

import java.util.List;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;
import org.apache.struts.actions.DispatchAction;

import com.amc.cfg.Constant;
import com.amc.domain.AmcReceivable;
import com.amc.domain.AmcReceivabledetail;
import com.amc.domain.AmcSaleaccount;
import com.amc.service.ReceivableService;
import com.amc.util.StringUtils;

/** 
 * MyEclipse Struts
 * Creation date: 12-22-2015
 * 
 * XDoclet definition:
 * @struts.action parameter="method"
 */
public class ReceivableAction extends DispatchAction {
	/*
	 * Generated Methods
	 */

	/** 
	 * Method execute
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return ActionForward
	 */
	private ReceivableService receivableService;
	public ActionForward list(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		// TODO Auto-generated method stub
		String pageNowString = (String) request.getParameter("pageNow");
		List<AmcReceivable> receivables=null;
		int pageNow,pageCount;
		if (StringUtils.isEmpty(pageNowString)) {
			int count=receivableService.getReceivableUndoCount();
			if(count%Constant.pageSize==0){
				pageCount = (int) Math.floor( count/ Constant.pageSize) ;
			}else{
				pageCount = (int) Math.floor( count/ Constant.pageSize) + 1;
			}
			pageNow=1;
			
			
		} else {
			pageCount=Integer.parseInt(request.getParameter("pageCount"));
			pageNow=Integer.parseInt(pageNowString);
		}
		receivables=receivableService.getReceivablesUndoByPage(pageNow, Constant.pageSize);
		request.setAttribute("pageCount",pageCount);
		request.setAttribute("pageNow",pageNow);
		request.setAttribute("receivablelist", receivables);
		return mapping.findForward("list");
	}
	public ActionForward showDetail(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		String rid=request.getParameter("rid");
		AmcReceivable receivable=receivableService.findReceivableById(Integer.parseInt(rid));
		List<AmcReceivabledetail> dList=receivableService.getReceivabledetails(receivable);
		
		request.setAttribute("rc",receivable);
		request.setAttribute("rcd",dList);
		return mapping.findForward("showDetail");
	}
	public ActionForward updateState(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		String rid=request.getParameter("rid");
		AmcReceivable receivable=receivableService.findReceivableById(Integer.parseInt(rid));
		
		if(receivable.getRcstate()==2){
			receivable.setRcstate(1);//设置为对方已收货未付款
		}else{
			receivable.setRcstate(0);//对方已付款
			//将应收账款转入销售业务账中
			receivableService.transReceivableToAccount(receivable);
		}
		return list(mapping, form, request, response);
	}
	public ActionForward listaccount(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		// TODO Auto-generated method stub
		String pageNowString = (String) request.getParameter("pageNow");
		List<AmcSaleaccount> saleaccounts=null;
		int pageNow,pageCount;
		if (StringUtils.isEmpty(pageNowString)) {
			int count=receivableService.getAccountCount();
			if(count%Constant.pageSize==0){
				pageCount = (int) Math.floor( count/ Constant.pageSize) ;
			}else{
				pageCount = (int) Math.floor( count/ Constant.pageSize) + 1;
			}
			pageNow=1;
			
			
		} else {
			pageCount=Integer.parseInt(request.getParameter("pageCount"));
			pageNow=Integer.parseInt(pageNowString);
		}
		saleaccounts=receivableService.getReceivablesdoneByPage(pageNow, Constant.pageSize);
		request.setAttribute("pageCount",pageCount);
		request.setAttribute("pageNow",pageNow);
		request.setAttribute("saleaccounts", saleaccounts);
		return mapping.findForward("listaccount");
	}
	public ActionForward showAccountDetail(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		String rid=request.getParameter("rid");
		AmcSaleaccount receivable=receivableService.getSaleaccountByAccountId(Integer.parseInt(rid));
		List<AmcReceivabledetail> dList=receivableService.getReceivabledetailsByAccount(receivable);
		
		request.setAttribute("rc",receivable);
		request.setAttribute("rcd",dList);
		return mapping.findForward("showAccountDetail");
	}
	public ReceivableService getReceivableService() {
		return receivableService;
	}
	public void setReceivableService(ReceivableService receivableService) {
		this.receivableService = receivableService;
	}
	
}