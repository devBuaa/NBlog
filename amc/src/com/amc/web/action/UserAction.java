/*
 * Generated by MyEclipse Struts
 * Template path: templates/java/JavaClass.vtl
 */
package com.amc.web.action;

import java.util.List;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;
import org.apache.struts.actions.DispatchAction;

import com.amc.cfg.Constant;
import com.amc.domain.AmcDepartment;
import com.amc.domain.AmcRole;
import com.amc.domain.AmcUser;
import com.amc.service.UserService;
import com.amc.util.MDUtil;
import com.amc.util.StringUtils;
import com.amc.web.form.UserManagerForm;

/**
 * MyEclipse Struts Creation date: 12-10-2015
 * 
 * XDoclet definition:
 * 
 * @struts.action parameter="method"
 */
public class UserAction extends DispatchAction {

	private UserService userService;

	public UserService getUserService() {
		return userService;
	}

	public void setUserService(UserService userService) {
		this.userService = userService;
	}

	/**
	 * Method execute
	 * 
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return ActionForward
	 */
	@SuppressWarnings("unchecked")
	public ActionForward list(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		// TODO Auto-generated method stub
		AmcUser user = (AmcUser) request.getSession().getAttribute("user");
		if (user == null) {
			return mapping.findForward("null");
		}
		if (user.getAmcRole().getId() != 1) {// 如果不为管理员则保护
			return mapping.findForward("protect");
		}
		String pageNowString = (String) request.getParameter("pageNow");// 当前页码
		List<AmcUser> users = null;
		int pageNow,pageCount;
		if (StringUtils.isEmpty(pageNowString)) {// 如果为空
			int count = userService.getUserCount();
			if (count % Constant.pageSize == 0) {
				pageCount = (int) Math.floor(count / Constant.pageSize);
			} else {
				pageCount = (int) Math.floor(count / Constant.pageSize) + 1;
			}
			pageNow=1;
		} else {
			pageCount=Integer.parseInt(request.getParameter("pageCount"));
			pageNow=Integer.parseInt(pageNowString);		
		}
		users = userService.findUsersByPage(pageNow, Constant.pageSize);
		request.setAttribute("pageCount",pageCount);
		request.setAttribute("pageNow",pageNow);
		request.setAttribute("userlist", users);
		return mapping.findForward("list");
	}

	public ActionForward updateForward(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		String uid = request.getParameter("uid");
		AmcUser user = (AmcUser) userService.findUserById(Integer.parseInt(uid));
		List<AmcRole> roles = userService.getAllRoles();
		List<AmcDepartment> departments = userService.getAllDepartments();
		request.setAttribute("updateUser", user);
		request.setAttribute("roles", roles);
		request.setAttribute("departments", departments);
		return mapping.findForward("updateForward");
	}

	public ActionForward update(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		String uid = request.getParameter("uid");
		AmcUser user = (AmcUser) userService
				.findUserById(Integer.parseInt(uid));
		UserManagerForm uForm = (UserManagerForm) form;
		String upsd = uForm.getUpassword();
		if (!StringUtils.isEmpty(upsd)
				&& !user.getPassword().equals(MDUtil.md5Encode(upsd))) {
			user.setPassword(upsd);
		}		
		user.setAmcRole((AmcRole) userService.findById(AmcRole.class,
				Integer.parseInt(uForm.getUrole())));
		user.setAmcDepartment((AmcDepartment) userService.findById(
				AmcDepartment.class, Integer.parseInt(uForm.getUdepartment())));
		if(!user.getName().equals(uForm.getUname()) && userService.checkExistUser(uForm.getUname()) != null){			
				return mapping.findForward("add_error");
		}
		user.setName(uForm.getUname());	
		userService.update(user);
		return list(mapping, uForm, request, response);
	}

	public ActionForward addForword(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		AmcUser user = (AmcUser) request.getSession().getAttribute("user");
		if (user == null) {
			return mapping.findForward("null");
		}
		if (user.getAmcRole().getId() != 1) {
			return mapping.findForward("protect");
		}
		List<AmcRole> roles = userService.getAllRoles();
		List<AmcDepartment> departments = userService.getAllDepartments();
		request.setAttribute("roles", roles);
		request.setAttribute("departments", departments);
		return mapping.findForward("addForward");
	}

	public ActionForward add(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {

		AmcUser user = new AmcUser();
		UserManagerForm uForm = (UserManagerForm) form;
		user.setPassword(MDUtil.md5Encode(uForm.getUpassword()));
		user.setName(uForm.getUname());
		user.setAmcRole((AmcRole) userService.findById(AmcRole.class,
				Integer.parseInt(uForm.getUrole())));
		user.setAmcDepartment((AmcDepartment) userService.findById(
				AmcDepartment.class, Integer.parseInt(uForm.getUdepartment())));
		if(userService.checkExistUser(uForm.getUname()) != null){			
			return mapping.findForward("add_error");
		}
		userService.save(user);

		return mapping.findForward("add_ok");
	}

	public ActionForward delete(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		String uid = request.getParameter("uid");
		if(Integer.parseInt(uid)!=1){//不能删除admin
			userService.deleteUserById(Integer.parseInt(uid));
		}
		return list(mapping, form, request, response);
	}

}