/*
 * Generated by MyEclipse Struts
 * Template path: templates/java/JavaClass.vtl
 */
package com.amc.web.action;

import java.io.IOException;
import java.text.ParseException;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import java.util.Map;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;
import org.apache.struts.actions.DispatchAction;

import com.amc.cfg.Constant;
import com.amc.domain.AmcDispatchorder;
import com.amc.domain.AmcDodetail;
import com.amc.domain.AmcProduct;
import com.amc.domain.AmcReceivable;
import com.amc.domain.AmcReceivabledetail;
import com.amc.domain.AmcSalesorder;
import com.amc.domain.AmcSodetail;
import com.amc.domain.AmcUser;
import com.amc.service.CustomerService;
import com.amc.service.DispatchService;
import com.amc.service.ProductService;
import com.amc.service.ReceivableService;
import com.amc.service.SalesOrderService;
import com.amc.service.UserService;
import com.amc.util.DateUtils;
import com.amc.util.StringUtils;

/**
 * MyEclipse Struts Creation date: 12-18-2015
 * 
 * XDoclet definition:
 * 
 * @struts.action parameter="method" validate="true"
 * @struts.action-forward name="list"
 *                        path="/erp/inventory/dispatchOrderList.jsp"
 */
public class DispatchOrderAction extends DispatchAction {

	private DispatchService dispatchService;
	private SalesOrderService salesOrderService;
	private CustomerService customerService;
	private ProductService productService;
	private UserService userService;
	private ReceivableService receivableService;
	@SuppressWarnings("unchecked")
	public ActionForward list(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		// TODO Auto-generated method stub
		String pageNowString = (String) request.getParameter("pageNow");
		List<AmcDispatchorder> orders = null;
		int pageNow, pageCount;
		if (StringUtils.isEmpty(pageNowString)) {
			int count = dispatchService.getDispatchOrderCount();
			if (count % Constant.pageSize == 0) {
				pageCount = (int) Math.floor(count / Constant.pageSize);
			} else {
				pageCount = (int) Math.floor(count / Constant.pageSize) + 1;
			}
			pageNow = 1;

		} else {
			pageCount = Integer.parseInt(request.getParameter("pageCount"));
			pageNow = Integer.parseInt(pageNowString);
		}
		orders = dispatchService.getDispatchOrdersByPage(pageNow,
				Constant.pageSize);
		request.setAttribute("pageCount", pageCount);
		request.setAttribute("pageNow", pageNow);
		request.setAttribute("dispatchorders", orders);
		return mapping.findForward("list");
	}

	public ActionForward showDetail(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		// TODO Auto-generated method stub
		String dsString = (String) request.getParameter("dsid");
		AmcDispatchorder ds = dispatchService.findDipatchOrderById(Integer
				.parseInt(dsString));
		List<AmcSodetail> salesOrderDetail = salesOrderService
				.getSalesOrderDetail(ds.getAmcSalesorder().getSoid());
		request.setAttribute("disp", ds);
		request.setAttribute("sod", salesOrderDetail);
		return mapping.findForward("showDetail");

	}

	public ActionForward addForward(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		// TODO Auto-generated method stub
		String soid = request.getParameter("soid");
		AmcSalesorder salesorder = salesOrderService.findSalesOrderById(Integer
				.parseInt(soid));
		List<AmcSodetail> salesOrderDetail = salesOrderService
				.getSalesOrderDetail(Integer.parseInt(soid));
		request.setAttribute("sod", salesOrderDetail);
		request.setAttribute("so", salesorder);
		return mapping.findForward("addForward");
	}

	public ActionForward add(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response)
			throws ParseException, IOException {
		// TODO Auto-generated method stub
		@SuppressWarnings("unchecked")
		Map<String, String[]> map = request.getParameterMap();
		AmcDispatchorder dispatchorder = new AmcDispatchorder();
		AmcSalesorder salesorder = salesOrderService.findSalesOrderById(Integer
				.parseInt(map.get("soid")[0]));
		Date cDate = DateUtils.parseDateFromString(map.get("sdate")[0]);
		AmcUser user = userService.loadByName(map.get("uname")[0]);
		float totalAccount = 0.0f;// 总金额

		dispatchorder.setAmcUser(user);
		dispatchorder.setDsdate(cDate);
		dispatchorder.setAmcSalesorder(salesorder);
		dispatchorder.setDstsize(Float.parseFloat(map.get("tsize")[0]));
		dispatchorder.setDstweight(Float.parseFloat(map.get("tweight")[0]));
		dispatchorder.setAmcCustomer(dispatchorder.getAmcSalesorder()
				.getAmcCustomer());

		if (dispatchService.checkIsExisted(dispatchorder.getAmcSalesorder()
				.getSoid()) == null) {
			String sodetail = map.get("sdetail")[0];
			String[] sods = sodetail.split("&\\^&");
			List<AmcDodetail> dList = new ArrayList<AmcDodetail>();
			List<AmcReceivabledetail> rcList=new ArrayList<AmcReceivabledetail>();//应收账款all
			// 记上应收账款
			AmcReceivable receivable = new AmcReceivable();
			receivable.setAmcSalesorder(salesorder);
			receivable.setRcstate(2);// 发货成功状态
			receivable.setRcctime(cDate);// 创建日期
			receivable.setRcrtime(DateUtils.getDateByOffset(cDate, 5));// 默认5天后收到货物
			receivable.setRcdeadline(DateUtils.getDateByOffset(cDate, 30));// 默认30天后付款期限
			receivable.setAmcUser(user);// 操作人员
			// 存入应收账款

			for (int i = 0; i < sods.length; i++) {
				String[] sod = sods[i].split("&");

				AmcProduct product = productService.loadProductById(Integer
						.parseInt(sod[0]));
				int amount = Integer.parseInt(sod[1]);
				totalAccount += amount * product.getPsaleprice();// 计算发货单总销售金额
				//发货单详情
				AmcDodetail dodetail = new AmcDodetail();
				dodetail.setAmcProduct(product);
				dodetail.setAmcDispatchorder(dispatchorder);
				dodetail.setDsdamount(amount);
				dodetail.setDsdsize(dodetail.getAmcProduct().getPsize());
				dodetail.setDsdweight(dodetail.getAmcProduct().getPweight());
				dList.add(dodetail);
				
				//应收账款详情
				AmcReceivabledetail receivabledetail=new AmcReceivabledetail();
				receivabledetail.setAmcReceivable(receivable);
				receivabledetail.setAmcProduct(product);
				receivabledetail.setRcdsaleprice(product.getPsaleprice());
				receivabledetail.setRcdamount(amount);
				receivabledetail.setRcdsum(amount * product.getPsaleprice());
				rcList.add(receivabledetail);
			}
			//添加发货单和发货单详情
			dispatchService.addDispatch(dispatchorder, dList);
			response.getWriter().write("1");
			//添加应收账款和相应明细
			receivable.setRctaccount(totalAccount);// 销售总金额
			receivableService.addReceivable(receivable, rcList);
			return null;
		}
		// 否则 返回已存在
		response.getWriter().write("-1");
		return null;

	}

	public ActionForward delete(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		// TODO Auto-generated method stub

		return list(mapping, form, request, response);
	}

	public DispatchService getDispatchService() {
		return dispatchService;
	}

	public void setDispatchService(DispatchService dispatchService) {
		this.dispatchService = dispatchService;
	}

	public SalesOrderService getSalesOrderService() {
		return salesOrderService;
	}

	public void setSalesOrderService(SalesOrderService salesOrderService) {
		this.salesOrderService = salesOrderService;
	}

	public CustomerService getCustomerService() {
		return customerService;
	}

	public void setCustomerService(CustomerService customerService) {
		this.customerService = customerService;
	}

	public ProductService getProductService() {
		return productService;
	}

	public void setProductService(ProductService productService) {
		this.productService = productService;
	}

	public UserService getUserService() {
		return userService;
	}

	public void setUserService(UserService userService) {
		this.userService = userService;
	}

	public ReceivableService getReceivableService() {
		return receivableService;
	}

	public void setReceivableService(ReceivableService receivableService) {
		this.receivableService = receivableService;
	}
	
}