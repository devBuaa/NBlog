/*
 * Generated by MyEclipse Struts
 * Template path: templates/java/JavaClass.vtl
 */
package com.amc.web.action;

import java.io.IOException;
import java.text.ParseException;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;
import org.apache.struts.actions.DispatchAction;

import com.amc.cfg.Constant;
import com.amc.domain.AmcSodetail;
import com.amc.domain.AmcUser;
import com.amc.domain.AmcWantslip;
import com.amc.domain.AmcWsdetail;
import com.amc.service.ProductService;
import com.amc.service.SalesOrderService;
import com.amc.service.WantSlipService;
import com.amc.util.DateUtils;
import com.amc.util.StringUtils;

/** 
 * MyEclipse Struts
 * Creation date: 12-19-2015
 * 
 * XDoclet definition:
 * @struts.action parameter="method"
 */
public class WantAction extends DispatchAction {
	
	private WantSlipService wantSlipService;
	private SalesOrderService salesOrderService;
	private ProductService productService;
	@SuppressWarnings("unchecked")
	public ActionForward list(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		// TODO Auto-generated method stub
		String pageNowString = (String) request.getParameter("pageNow");
		List<AmcWantslip> wantslips=null;
		int pageNow,pageCount;
		if (StringUtils.isEmpty(pageNowString)) {// 如果为空
			int count = wantSlipService.getWantSlipCount() ;
			if (count % Constant.pageSize == 0) {
				pageCount = (int) Math.floor(count / Constant.pageSize);
			} else {
				pageCount = (int) Math.floor(count / Constant.pageSize) + 1;
			}
			pageNow=1;
		} else {
			pageCount=Integer.parseInt(request.getParameter("pageCount"));
			pageNow=Integer.parseInt(pageNowString);		
		}
		wantslips = wantSlipService.getWantSlipsByPage(pageNow, Constant.pageSize);
		request.setAttribute("pageCount",pageCount);
		request.setAttribute("pageNow",pageNow);
		request.setAttribute("wantlist", wantslips);
		return mapping.findForward("list");
	}
	public ActionForward showDetail(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		// TODO Auto-generated method stub
		String wsid=request.getParameter("wsid");
		AmcWantslip wantslip=wantSlipService.findWantSlipById(Integer.parseInt(wsid));
		List<AmcWsdetail> wsdetails = wantSlipService.getWantSlipDetail(Integer.parseInt(wsid));
		request.setAttribute("wsd", wsdetails);
		request.setAttribute("ws", wantslip);
		return mapping.findForward("showDetail");
	}
	
	public ActionForward showDetailBySo(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		// TODO Auto-generated method stub
		String soid=request.getParameter("soid");
		List<AmcSodetail> salesOrderDetail = salesOrderService.getSalesOrderDetail(Integer.parseInt(soid));
		request.setAttribute("sod", salesOrderDetail);
		request.setAttribute("soid", soid);
		return mapping.findForward("showDetailBySo");
	}
	@SuppressWarnings({ "unchecked" })
	public ActionForward add(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) throws IOException, ParseException {
		String soid=request.getParameter("soid");
		if(wantSlipService.checkIsExisted(Integer.parseInt(soid))==null){
			Map<String, String[]> map=request.getParameterMap();
			AmcWantslip wantslip=new AmcWantslip();
			wantslip.setAmcUser((AmcUser)wantSlipService.findById(AmcUser.class, Integer.parseInt(map.get("wuid")[0])));
			wantslip.setWsctime(DateUtils.parseDateFromString(map.get("wctime")[0]));
			wantslip.setWsetime(DateUtils.parseDateFromString(map.get("wetime")[0]));
			wantslip.setAmcSalesorder(salesOrderService.findSalesOrderById(Integer.parseInt(soid)));
			wantslip.setWsstate(2);
			String wsd=map.get("wsd")[0];
			List<AmcWsdetail> wsdetails=new ArrayList<AmcWsdetail>();
			String[] wsds= wsd.split("&\\^&");
			for(int i=0;i<wsds.length;i++){
				String[] sd=wsds[i].split("&");
				AmcWsdetail wsdetail=new AmcWsdetail();
				wsdetail.setAmcWantslip(wantslip);
				wsdetail.setAmcProduct(productService.loadProductById(Integer.parseInt(sd[0])));
				wsdetail.setWsdamount(Integer.parseInt(sd[1]));
				wsdetails.add(wsdetail);
			}
			wantSlipService.addWantSlip(wantslip, wsdetails);
			response.getWriter().write("1");
		}else{
			response.getWriter().write("-1");
		}
		return null;
	}
	public SalesOrderService getSalesOrderService() {
		return salesOrderService;
	}
	public void setSalesOrderService(SalesOrderService salesOrderService) {
		this.salesOrderService = salesOrderService;
	}
	public WantSlipService getWantSlipService() {
		return wantSlipService;
	}
	public void setWantSlipService(WantSlipService wantSlipService) {
		this.wantSlipService = wantSlipService;
	}
	public ProductService getProductService() {
		return productService;
	}
	public void setProductService(ProductService productService) {
		this.productService = productService;
	}
	
	
	
}