/*
 * Generated by MyEclipse Struts
 * Template path: templates/java/JavaClass.vtl
 */
package com.amc.web.action;

import java.util.List;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;
import org.apache.struts.actions.DispatchAction;

import com.amc.cfg.Constant;
import com.amc.domain.AmcCustomer;
import com.amc.service.CustomerService;
import com.amc.util.StringUtils;
import com.amc.web.form.CustomerManagerForm;

/** 
 * MyEclipse Struts
 * Creation date: 12-14-2015
 * 
 * XDoclet definition:
 * @struts.action parameter="method" validate="true"
 */
public class CustomerAction extends DispatchAction {
	

	private CustomerService customerService;
	@SuppressWarnings("unchecked")
	public ActionForward list(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		// TODO Auto-generated method stub
		String pageNowString = (String) request.getParameter("pageNow");
		List<AmcCustomer> customers=null;
		int pageNow,pageCount;
		if (StringUtils.isEmpty(pageNowString)) {
			int count=customerService.getCustomersCount();
			if(count%Constant.pageSize==0){
				pageCount = (int) Math.floor( count/ Constant.pageSize) ;
			}else{
				pageCount = (int) Math.floor( count/ Constant.pageSize) + 1;
			}
			pageNow=1;
			
			
		} else {
			pageCount=Integer.parseInt(request.getParameter("pageCount"));
			pageNow=Integer.parseInt(pageNowString);
		}
		customers=customerService.getCustomersByPage(pageNow, Constant.pageSize);
		request.setAttribute("pageCount",pageCount);
		request.setAttribute("pageNow",pageNow);
		request.setAttribute("customerlist", customers);
		return mapping.findForward("list");
	}
	public ActionForward updateForward(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		String cid = request.getParameter("cid");
		AmcCustomer customer = (AmcCustomer) customerService.findCustomerById(Integer.parseInt(cid));
		request.setAttribute("updateCustomer", customer);
		return mapping.findForward("updateForward");
	}

	public ActionForward update(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		String cid = request.getParameter("cid");
		AmcCustomer customer = (AmcCustomer) customerService.findCustomerById(Integer.parseInt(cid));
		CustomerManagerForm cForm = (CustomerManagerForm) form;
		customer.setCname(cForm.getCname());
		customer.setCphone(cForm.getCphone());
		customer.setCaddress(cForm.getCaddress());
		customer.setCcredit(Integer.parseInt(cForm.getCcredit()));
		customerService.update(customer);
		return list(mapping, cForm, request, response);
	}
	
	public ActionForward add(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		
		AmcCustomer customer =new AmcCustomer();
		CustomerManagerForm cForm = (CustomerManagerForm) form;
		customer.setCname(cForm.getCname());
		customer.setCphone(cForm.getCphone());
		customer.setCaddress(cForm.getCaddress());
		customer.setCcredit(Integer.parseInt(cForm.getCcredit()));
		customer.setCtype(1);
		customerService.addCustomer(customer);
		return mapping.findForward("add_ok");
	}
	public ActionForward delete(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		String cid = request.getParameter("cid");
		customerService.deleteById(Integer.parseInt(cid));
		return list(mapping, form, request, response);
	}
	
	public CustomerService getCustomerService() {
		return customerService;
	}
	public void setCustomerService(CustomerService customerService) {
		this.customerService = customerService;
	}
	
}