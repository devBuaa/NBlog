/*
 * Generated by MyEclipse Struts
 * Template path: templates/java/JavaClass.vtl
 */
package com.amc.web.action;

import java.io.IOException;
import java.util.List;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;
import org.apache.struts.actions.DispatchAction;

import com.amc.cfg.Constant;
import com.amc.domain.AmcProduct;
import com.amc.service.ProductService;
import com.amc.util.StringUtils;
import com.amc.web.form.ProductForm;

/** 
 * MyEclipse Struts
 * Creation date: 12-16-2015
 * 
 * XDoclet definition:
 * @struts.action parameter="method"
 */
public class ProductAction extends DispatchAction {

	private ProductService productService;
	public ActionForward list(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		// TODO Auto-generated method stub
		String pageNowString = request.getParameter("pageNow");
		String pageCountString = request.getParameter("pageCount");
		int pageCount;
		int pageNow = 1;
		
		if(StringUtils.isEmpty(pageCountString)) {
			int count=productService.getProductCount();
			if(count%Constant.pageSize==0){
				pageCount=(int) Math.floor( count/ Constant.pageSize);
			}else{
				pageCount=(int) Math.floor( count/ Constant.pageSize) + 1;
			}
			
		}else {
			pageCount=Integer.parseInt(pageCountString);
		}
		
		if (!StringUtils.isEmpty(pageNowString)){
			pageNow = Integer.parseInt(pageNowString);
		}
		@SuppressWarnings("rawtypes")
		List productList = productService.getProductByPage(pageNow, Constant.pageSize);
		request.setAttribute("productList", productList);
		request.setAttribute("pageCount", pageCount);
		request.setAttribute("pageNow", pageNow);
		return mapping.findForward("list");
	}
	public ActionForward updateForward(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		// TODO Auto-generated method stub
		String pidString = request.getParameter("pid");
		AmcProduct product = productService.loadProductById(Integer.parseInt(pidString));
		request.setAttribute("updateProduct", product);
		return mapping.findForward("updateForward");
	}
	public ActionForward update(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		// TODO Auto-generated method stub
		ProductForm productForm=(ProductForm)form;
		AmcProduct product=productService.loadProductById(Integer.parseInt(productForm.getPid()));
		product.setPsize(productForm.getPsize());
		product.setPweight(productForm.getPweight());
		product.setPname(productForm.getPname());
		product.setPsaleprice(productForm.getPsaleprice());
		product.setPpurchaseprice(productForm.getPpurchaseprice());
		int safe=productForm.getPsafeamount();
		int inventory=productForm.getPinventoryamount();
		product.setPsafeamount(safe);
		product.setPinventoryamount(inventory);
		product.setPshortamount(safe-inventory);
		product.setPinventorystate(inventory>=safe?1:0);
		productService.update(product);
		return list(mapping, form, request, response);
	}
	public ActionForward add(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		// TODO Auto-generated method stub
		ProductForm productForm=(ProductForm)form;
		boolean isExisted = productService.checkIdIsExisted(Integer.parseInt(productForm.getPid()));
		if(isExisted){
			return mapping.findForward("add_error");
		}
		AmcProduct product=new AmcProduct();
		product.setPid(Integer.parseInt(productForm.getPid()));
		product.setPsize(productForm.getPsize());
		product.setPweight(productForm.getPweight());
		product.setPname(productForm.getPname());
		product.setPsaleprice(productForm.getPsaleprice());
		product.setPpurchaseprice(productForm.getPpurchaseprice());
		int safe=productForm.getPsafeamount();
		int inventory=productForm.getPinventoryamount();
		product.setPsafeamount(safe);
		product.setPinventoryamount(inventory);
		product.setPshortamount(safe-inventory);
		product.setPinventorystate(inventory>=safe?1:0);
		productService.save(product);		
		return mapping.findForward("add_ok");
	}
	public ActionForward delete(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		// TODO Auto-generated method stub
		
		String pid = request.getParameter("pid");
		productService.deleteProductById(pid);
		return list(mapping, form, request, response);
	}
	public ActionForward validateId(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) throws IOException {
		// TODO Auto-generated method stub
		
		String pid = request.getParameter("pid");
		
		boolean i=productService.checkIdIsExisted(Integer.parseInt(pid));
		if(i){
			response.getWriter().write("1");
		}else {
			response.getWriter().write("0");
		}
		return null;
	}
	
	public ProductService getProductService() {
		return productService;
	}
	public void setProductService(ProductService productService) {
		this.productService = productService;
	}
	
	
	
	
}