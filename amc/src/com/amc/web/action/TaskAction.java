/*
 * Generated by MyEclipse Struts
 * Template path: templates/java/JavaClass.vtl
 */
package com.amc.web.action;

import java.util.List;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import org.apache.struts.action.Action;
import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;

import com.amc.domain.AmcProduct;
import com.amc.domain.AmcShortstock;
import com.amc.domain.AmcWantslip;
import com.amc.service.ProductService;
import com.amc.service.PurchaseOrderService;
import com.amc.service.WantSlipService;

/** 
 * MyEclipse Struts
 * Creation date: 12-22-2015
 * 
 * XDoclet definition:
 * @struts.action
 */
public class TaskAction extends Action {
	/*
	 * Generated Methods
	 */
	private PurchaseOrderService purchaseOrderService;
	private ProductService productService;
	private WantSlipService wantSlipService;
	public ActionForward execute(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) throws Exception {
		// TODO Auto-generated method stub
		//删除所有的数据
		purchaseOrderService.update("delete from AmcShortstock where 1=1", null);
		//遍历所有产品
		List<AmcProduct> products=productService.getAllProducts();
		for(AmcProduct product:products){
			int inventoryamount= product.getPinventoryamount();//库存数
			int safeamount=product.getPsafeamount();//安全库存
			int wn=wantSlipService.getWantProductNumber(product);//缺货数
			int pn=purchaseOrderService.purchasingProductAmount(product);//正在采购数
			
			int lackamount;
			if(wn>0){//如果存在缺货 则补货
				lackamount=wn+safeamount-pn;
			}else{
				lackamount=safeamount-inventoryamount-pn;//总缺货数
			}			
			if(lackamount>0){
				AmcShortstock shortstock=new AmcShortstock();
				shortstock.setAmcProduct(product);
				shortstock.setInventory(inventoryamount);
				shortstock.setPurchaseprice(product.getPpurchaseprice());
				shortstock.setSafeamount(safeamount);
				shortstock.setStockamount(wn);
				shortstock.setTotalamount(lackamount);
				shortstock.setTotalprice(product.getPpurchaseprice()*lackamount);
				purchaseOrderService.save(shortstock);
			}
		}
		//修改遍历过的缺货单状态从2-->3
		List<AmcWantslip> undoWantSlips = wantSlipService.getUndoWantSlips();
		for(AmcWantslip wantslip:undoWantSlips){
			wantslip.setWsstate(3);
			wantSlipService.update(wantslip);
		}
		response.getWriter().write("1");
		return null;
	}
	public PurchaseOrderService getPurchaseOrderService() {
		return purchaseOrderService;
	}
	public void setPurchaseOrderService(PurchaseOrderService purchaseOrderService) {
		this.purchaseOrderService = purchaseOrderService;
	}
	public ProductService getProductService() {
		return productService;
	}
	public void setProductService(ProductService productService) {
		this.productService = productService;
	}
	public WantSlipService getWantSlipService() {
		return wantSlipService;
	}
	public void setWantSlipService(WantSlipService wantSlipService) {
		this.wantSlipService = wantSlipService;
	}
	
}