/*
 * Generated by MyEclipse Struts
 * Template path: templates/java/JavaClass.vtl
 */
package com.amc.web.action;

import java.util.List;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;
import org.apache.struts.actions.DispatchAction;

import com.amc.cfg.Constant;
import com.amc.domain.AmcSupplier;
import com.amc.service.SupplierService;
import com.amc.util.StringUtils;
import com.amc.web.form.SupplierForm;

/** 
 * MyEclipse Struts
 * Creation date: 12-18-2015
 * 
 * XDoclet definition:
 * @struts.action parameter="method"
 */
public class SupplierAction extends DispatchAction {
	
	private SupplierService supplierService;
	@SuppressWarnings("unchecked")
	public ActionForward list(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		// TODO Auto-generated method stub
		String pageNowString = (String) request.getParameter("pageNow");
		int pageCount,pageNow;
		List<AmcSupplier> suppliers=null;
		if (StringUtils.isEmpty(pageNowString)) {
			int count=supplierService.getSuppliersCount();
			if(count%Constant.pageSize==0){
				pageCount = (int) Math.floor( count/ Constant.pageSize);
			}else{
				pageCount = (int) Math.floor( count/ Constant.pageSize) + 1;
			}
			pageNow=1;
		} else {
			pageCount=Integer.parseInt(request.getParameter("pageCount"));
			pageNow=Integer.parseInt(pageNowString);
		}
		suppliers = supplierService.getSuppliersByPage(pageNow, Constant.pageSize);
		request.setAttribute("pageCount",pageCount);
		request.setAttribute("pageNow",pageNow);
		request.setAttribute("supplierlist", suppliers);
		return mapping.findForward("list");
	}
	public ActionForward add(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		SupplierForm supplierForm=(SupplierForm)form;
		AmcSupplier supplier=new AmcSupplier();
		supplier.setSname(supplierForm.getSname());
		supplier.setSaddress(supplierForm.getSaddress());
		supplier.setSphone(supplierForm.getSphone());
		supplier.setScontactPerson(supplierForm.getScontactPerson());
		supplier.setSemail(supplierForm.getSemail());
		supplierService.addSupplier(supplier);
		return mapping.findForward("add_ok");
	}
	public ActionForward updateForward(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		String sidString=request.getParameter("sid");
		AmcSupplier supplier = supplierService.findSupplierById(Integer.parseInt(sidString));
		request.setAttribute("updateSupplier", supplier);
		return mapping.findForward("updateForward");
	}
	public ActionForward update(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		SupplierForm supplierForm=(SupplierForm)form;
		AmcSupplier supplier=supplierService.findSupplierById(Integer.parseInt(supplierForm.getSid()));
		supplier.setSname(supplierForm.getSname());
		supplier.setSaddress(supplierForm.getSaddress());
		supplier.setSphone(supplierForm.getSphone());
		supplier.setScontactPerson(supplierForm.getScontactPerson());
		supplier.setSemail(supplierForm.getSemail());
		supplierService.update(supplier);
		return list(mapping, form, request, response);
	}
	public ActionForward delete(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		String sidString=request.getParameter("sid");
		supplierService.deleteSupplierById(Integer.parseInt(sidString));
		return list(mapping, form, request, response);
	}

	public SupplierService getSupplierService() {
		return supplierService;
	}

	public void setSupplierService(SupplierService supplierService) {
		this.supplierService = supplierService;
	}
	
	
}