<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" 
    "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.nblog.dao.ResourcesDao">
	<!--mybatis ehcache缓存配置 -->
	<!-- 以下两个<cache>标签二选一,第一个可以输出日志,第二个不输出日志 <cache type="org.mybatis.caches.ehcache.LoggingEhcache" 
		/> -->
	<!-- <cache type="org.mybatis.caches.ehcache.EhcacheCache"/> -->

	<sql id="selectId">
		Id,
		Name,
		ParentId,
		(select r.Name from Resources r where r.Id = Resources.ParentId )
		ParentName,
		ResKey,
		IsHide,
		Type,
		Url,
		Level,
		Icon,
		Description
	</sql>
	<select id="findChildlists" resultType="com.nblog.bean.Resources">
		SELECT
		<include refid="selectId" />
		from Resources
		where ParentId = #{id}
	</select>
	<!-- 获取该用户的权限 -->
	<select id="findResources" parameterType="com.nblog.bean.User" resultType="com.nblog.bean.Resources">
		SELECT
		<include refid="selectId" />
		from Resources where id in
		(
			select ResId from
				RoleResources where 1=1 and RoleId in
				(
					select RoleId from UserRole where 1=1 
					<if test="UserNo != null and UserNo != '' and UserNo != 0">
						and UserNo = #{UserNo}
					</if>
					
				 )
		)
		order by Level asc
	</select>

	<!-- 根据账号Id获取该用户的权限 -->
	<select id="findUserResources" parameterType="String"
		resultType="com.nblog.bean.Resources">
		SELECT
		<include refid="selectId" />
		from Resources where id in
		(
			select ResId from
				RoleResources where 1=1 and RoleId in
				(
					select RoleId from UserRole where 1=1 
					<if test="UserNo != null and UserNo != '' and UserNo != 0">
						and UserNo = #{UserNo}
					</if>
					
				 )
		)
		order by Level asc
	</select>
	<update id="updateSortOrder" parameterType="java.util.List">
          <foreach collection="list" item="item" index="index" open="" close="" separator=";">
                update Resources
                <set>
                  Level = #{item.Level}
                </set>
                where Id = #{item.Id}
         </foreach>
	</update>
	<!-- 删 -->
	<delete id="deleteResourcesRole" parameterType="String">
		delete from
		Role
		where id=#{id}
	</delete>

	<insert id="addRoleRes">
		insert into RoleResources (RoleId,ResId) value (#{RoleId},#{ResId})
	</insert>

</mapper>